name: VCMI - vcpkg dependencies (Windows XP)

on:
  push:
    branches: [ master ]
  pull_request:
  schedule:
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: msvc-x64
            triplet: x64-windows
            runner: windows-latest
            overlay: vcmi-overlay-boost
          - platform: msvc-x86
            triplet: x86-windows
            runner: windows-latest
            overlay: vcmi-overlay-boost

    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Install MSVC v141_xp toolset
        shell: powershell
        run: |
          choco install visualstudio2019buildtools --version=16.11.39 -y --package-parameters "--add Microsoft.VisualStudio.Component.VC.14.16.x86.x64 --includeRecommended --includeOptional --passive --norestart"
          
          $vs2019 = & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -products * -version "[16.0,17.0)" -property installationPath
          if (-not $vs2019) { throw "VS2019 Build Tools not found!" }
          Write-Host "Found VS2019 at $vs2019"
      
          # čekat, dokud se nedokončí instalace VC toolchainu
          $vcvars = Join-Path $vs2019 "VC\Auxiliary\Build\vcvarsall.bat"
          $retries = 30
          while (-not (Test-Path $vcvars) -and $retries -gt 0) {
              Write-Host "Waiting for VC++ toolchain to finish installing..."
              Start-Sleep -Seconds 10
              $retries--
          }
      
          if (-not (Test-Path $vcvars)) {
              throw "vcvarsall.bat not found after waiting, VC++ workload did not install correctly."
          }
      
          # nastavit proměnné pro vcpkg
          echo "VCPKG_VISUAL_STUDIO_PATH=$vs2019" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCToolsVersion=14.16" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append


      - name: Checkout vcpkg
        uses: actions/checkout@v4
        with:
          repository: 'microsoft/vcpkg'
          ref: master

      - name: Prepare overlays (Boost + YASM)
        run: |
          mkdir -p vcmi-overlay-boost vcmi-overlay-yasm

          # Boost overlay (XP/Win7 compatible)
          git fetch origin ec12d917a85839741f8345905f71b3e7f56d9ddc
          git checkout ec12d917a85839741f8345905f71b3e7f56d9ddc
          cp -r ports/boost* vcmi-overlay-boost/

          # YASM overlay (fix ARM build issues)
          git fetch origin 94a9df6990e426ec3fff1a4ba20016da4aafea70
          git checkout 94a9df6990e426ec3fff1a4ba20016da4aafea70
          cp -r ports/yasm* vcmi-overlay-yasm/

          git checkout master

      - name: Disable debug builds
        run: |
          echo 'set(VCPKG_BUILD_TYPE release)' >>triplets/x64-windows.cmake
          echo 'set(VCPKG_BUILD_TYPE release)' >>triplets/x86-windows.cmake

      - name: Enable Windows XP targeting (x86/x64)
        run: |
          echo 'set(VCPKG_PLATFORM_TOOLSET v141_xp)' >>triplets/${{ matrix.triplet }}.cmake
          echo 'set(VCPKG_CXX_FLAGS "-D_WIN32_WINNT=0x0501 -DWINVER=0x0501")' >>triplets/${{ matrix.triplet }}.cmake
          echo 'set(VCPKG_C_FLAGS   "-D_WIN32_WINNT=0x0501 -DWINVER=0x0501")' >>triplets/${{ matrix.triplet }}.cmake

      - name: Initialize vcpkg
        run: ./bootstrap-vcpkg.bat

      - name: Install dependencies
        run: |
          ./vcpkg.exe install yasm --triplet "${{ matrix.triplet }}" --overlay-ports=${{ matrix.overlay }} --allow-unsupported

          ./vcpkg.exe install \
            tbb fuzzylite sdl2 sdl2-image sdl2-ttf sdl2-mixer[core,mpg123] \
            qt5-base qt5-tools \
            ffmpeg[core,avcodec,avformat,swresample,swscale] \
            boost-filesystem boost-system boost-thread boost-program-options boost-locale \
            boost-iostreams boost-headers boost-foreach boost-format boost-crc boost-logic \
            boost-multi-array boost-ptr-container boost-heap boost-bimap boost-asio \
            boost-stacktrace boost-assign boost-geometry boost-uuid boost-process \
            --triplet "${{ matrix.triplet }}" \
            --overlay-ports=${{ matrix.overlay }} \
            --allow-unsupported

      - name: Export packages
        run: |
          ./vcpkg.exe export \
            tbb fuzzylite sdl2 sdl2-image sdl2-ttf sdl2-mixer qt5-base qt5-tools ffmpeg \
            boost-filesystem boost-system boost-thread boost-program-options boost-locale \
            boost-iostreams boost-headers boost-foreach boost-format boost-crc boost-logic \
            boost-multi-array boost-ptr-container boost-heap boost-bimap boost-asio \
            boost-stacktrace boost-assign boost-geometry boost-uuid boost-process \
            --raw --triplet "${{ matrix.triplet }}" \
            --overlay-ports=${{ matrix.overlay }} \
            --output=result/vcpkg

      - name: Trim pdb files
        run: |
          find result/vcpkg/installed/*/tools -type f -name "*.pdb" -delete

      - name: Create archive
        run: |
          tar --create --xz --file dependencies-${{ matrix.platform }}.txz -C result vcpkg

      - name: Log resulting packages
        run: ./vcpkg.exe list

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dependencies-${{ matrix.platform }}
          path: ${{ github.workspace }}/dependencies-${{ matrix.platform }}.txz
          compression-level: 0
