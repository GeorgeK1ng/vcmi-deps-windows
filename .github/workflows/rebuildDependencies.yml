name: VCMI - vcpkg XP dependencies

on:
  workflow_dispatch:

jobs:
  build-xp:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: msvc-x64-xp
            triplet: x64-windows-xp
            runner: windows-latest
          - platform: msvc-x86-xp
            triplet: x86-windows-xp
            runner: windows-latest

    runs-on: ${{ matrix.runner }}

    steps:
      # Install VS2019 Build Tools with v141_xp and Windows XP support
      - name: Install v141_xp toolset
        shell: powershell
        run: |
          choco install visualstudio2019buildtools --package-parameters "--quiet --add Microsoft.VisualStudio.Component.VC.v141.x86.x64 --add Microsoft.VisualStudio.Component.WindowsXP" -y
          $vsPath = "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsall.bat"
          if (!(Test-Path $vsPath)) { throw "vcvarsall.bat not found at $vsPath" }
          echo "VSCMD_BAT=$vsPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Checkout vcpkg baseline
      - name: Checkout vcpkg
        uses: actions/checkout@v4
        with:
          repository: 'microsoft/vcpkg'
          ref: 2021.05.12

      # Create XP triplets
      - name: Create XP triplets
        shell: bash
        run: |
          mkdir -p triplets
          cat <<EOF > triplets/x64-windows-xp.cmake
          set(VCPKG_TARGET_ARCHITECTURE x64)
          set(VCPKG_CRT_LINKAGE dynamic)
          set(VCPKG_LIBRARY_LINKAGE dynamic)
          set(VCPKG_PLATFORM_TOOLSET v141_xp)
          set(VCPKG_C_FLAGS "-D_WIN32_WINNT=0x0501 -DWINVER=0x0501")
          set(VCPKG_CXX_FLAGS "-D_WIN32_WINNT=0x0501 -DWINVER=0x0501")
          EOF

          cat <<EOF > triplets/x86-windows-xp.cmake
          set(VCPKG_TARGET_ARCHITECTURE x86)
          set(VCPKG_CRT_LINKAGE dynamic)
          set(VCPKG_LIBRARY_LINKAGE dynamic)
          set(VCPKG_PLATFORM_TOOLSET v141_xp)
          set(VCPKG_C_FLAGS "-D_WIN32_WINNT=0x0501 -DWINVER=0x0501")
          set(VCPKG_CXX_FLAGS "-D_WIN32_WINNT=0x0501 -DWINVER=0x0501")
          EOF

      # Prepare Boost overlay (Boost 1.72)
      - name: Prepare Boost overlay
        shell: bash
        run: |
          mkdir -p vcmi-overlay
          git clone --depth 1 --branch 2020.01 https://github.com/microsoft/vcpkg.git temp-vcpkg
          cp -r temp-vcpkg/ports/boost* vcmi-overlay/
          cd ..
          rm -rf temp-vcpkg

      # Prepare Qt5 overlay (Qt 5.6.3)
      - name: Prepare Qt5 overlay
        shell: bash
        run: |
          git clone --depth 1 --branch 2020.01 https://github.com/microsoft/vcpkg.git temp-vcpkg-qt
          cp -r temp-vcpkg-qt/ports/qt5* vcmi-overlay/
          rm -rf temp-vcpkg-qt

      # Bootstrap vcpkg with XP toolset
      - name: Bootstrap vcpkg
        shell: cmd
        run: |
          call "%VSCMD_BAT%" amd64
          bootstrap-vcpkg.bat

      # Install dependencies
      - name: Install XP dependencies
        shell: cmd
        run: |
          call "%VSCMD_BAT%" amd64
          vcpkg.exe install yasm --triplet "${{ matrix.triplet }}" --overlay-ports=vcmi-overlay
          vcpkg.exe install ^
            tbb fuzzylite sdl2 sdl2-image sdl2-ttf sdl2-mixer[core,mpg123] ^
            qt5-base qt5-tools ^
            ffmpeg[core,avcodec,avformat,swresample,swscale] ^
            boost-filesystem boost-system boost-thread boost-program-options boost-locale ^
            boost-iostreams boost-headers boost-foreach boost-format boost-crc boost-logic ^
            boost-multi-array boost-ptr-container boost-heap boost-bimap boost-asio ^
            boost-stacktrace boost-assign boost-geometry boost-uuid boost-process ^
            --triplet "${{ matrix.triplet }}" ^
            --overlay-ports=vcmi-overlay

      - name: Export XP packages
        shell: cmd
        run: |
          call "%VSCMD_BAT%" amd64
          vcpkg.exe export ^
            tbb fuzzylite sdl2 sdl2-image sdl2-ttf sdl2-mixer qt5-base qt5-tools ffmpeg ^
            boost-filesystem boost-system boost-thread boost-program-options boost-locale ^
            boost-iostreams boost-headers boost-foreach boost-format boost-crc boost-logic ^
            boost-multi-array boost-ptr-container boost-heap boost-bimap boost-asio ^
            boost-stacktrace boost-assign boost-geometry boost-uuid boost-process ^
            --raw --triplet "${{ matrix.triplet }}" ^
            --overlay-ports=vcmi-overlay ^
            --output=result/vcpkg

      - name: Create XP archive
        shell: bash
        run: |
          tar --create --xz --file dependencies-${{ matrix.platform }}.txz -C result vcpkg

      - name: Log built packages
        shell: cmd
        run: vcpkg.exe list

      - name: Upload XP artifact
        uses: actions/upload-artifact@v4
        with:
          name: dependencies-${{ matrix.platform }}
          path: ${{ github.workspace }}/dependencies-${{ matrix.platform }}.txz
          compression-level: 0
